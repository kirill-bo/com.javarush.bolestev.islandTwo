package entities;

import entities.creature.plant.Plant;
import entities.—Åonfig.AnimalConfig;
import entities.—Åonfig.AnimalConfigLoader;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;

public class Cell {
    private final int row;
    private final int col;
    private final Island island;
    private final List<Animal> animals = new CopyOnWriteArrayList<>();
    private final List<Plant> plants = new CopyOnWriteArrayList<>();

    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
    public Cell(int row, int col, Island island) {
        this.row = row;
        this.col = col;
        this.island = island;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∫–ª–µ—Ç–∫–∏
    public int getRow() {
        return row;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –∫–ª–µ—Ç–∫–∏
    public int getCol() {
        return col;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç—Ä–æ–≤–∞, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫–ª–µ—Ç–∫–∞
    public Island getIsland() {
        return island;
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –≤ –∫–ª–µ—Ç–∫—É
    public synchronized void addAnimal(Animal animal) {
        animals.add(animal);
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –≤ –∫–ª–µ—Ç–∫—É
    public void addPlant(Plant plant) {
        plants.add(plant);
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –∏–∑ –∫–ª–µ—Ç–∫–∏
    public synchronized void removeAnimal(Animal animal) {
        animals.remove(animal);
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –∏–∑ –∫–ª–µ—Ç–∫–∏
    public void removeDeadPlants() {
        plants.removeIf(plant -> {
            if (plant.getWeight() <= 0) {
                System.out.println("üå± –†–∞—Å—Ç–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–ª–µ—Ç–∫–∏ [" + row + "][" + col + "] –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ –≤–µ—Å–∞.");
                return true; // –£–¥–∞–ª—è–µ–º —Ä–∞—Å—Ç–µ–Ω–∏–µ —Å –Ω—É–ª–µ–≤—ã–º –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –≤–µ—Å–æ–º
            }
            return false;
        });
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –º—ë—Ä—Ç–≤—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏–∑ –∫–ª–µ—Ç–∫–∏
    public void removeDeadAnimals() {
        animals.removeIf(animal -> {
            if (!animal.isAlive()) {
                System.out.println("‚ùå " + animal.getEmoji() + " —É–¥–∞–ª—ë–Ω –∏–∑ –∫–ª–µ—Ç–∫–∏ [" + row + "][" + col + "] –∏–∑-–∑–∞ —Å–º–µ—Ä—Ç–∏.");
                return true; // –£–¥–∞–ª—è–µ–º –º—ë—Ä—Ç–≤–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ
            }
            return false;
        });
    }

    public synchronized List<Animal> getAnimals() {
        return new ArrayList<>(animals); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    }

    public synchronized List<Plant> getPlants() {
        return new ArrayList<>(plants); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µ –≤ –∫–ª–µ—Ç–∫—É
    public boolean canAddAnimal(Animal animal) {
        long count = countAnimalsOfType(animal.getClass());
        return count < animal.getMaxOnCell();
    }

    // –ü–æ–¥—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
    public long countAnimalsOfType(Class<? extends Animal> type) {
        return animals.stream()
                .filter(type::isInstance) // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–ª–∞—Å—Å–∞
                .count();
    }

    public int getMaxAnimalsPerType(Class<? extends Animal> animalClass) {
        String type = animalClass.getSimpleName();
        AnimalConfig config = AnimalConfigLoader.getAnimalConfig(type);
        return config != null ? config.getMaxOnCell() : Integer.MAX_VALUE;
    }

    @Override
    public String toString() {
        StringBuilder builder = new StringBuilder();

        // –î–æ–±–∞–≤–ª—è–µ–º –∂–∏–≤–æ—Ç–Ω—ã—Ö
        if (!animals.isEmpty()) {
            animals.forEach(animal -> builder.append(animal.getEmoji()).append(" "));
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ç–µ–Ω–∏—è
        if (!plants.isEmpty()) {
            builder.append("üå±").append(plants.size()).append(" ");
        }

        return builder.toString();
    }

    public void growPlants() {
        plants.forEach(plant -> {
            plant.increaseWeight(0.1); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Å —Ä–∞—Å—Ç–µ–Ω–∏—è
            System.out.println("üå± –†–∞—Å—Ç–µ–Ω–∏–µ –≤ –∫–ª–µ—Ç–∫–µ [" + row + "][" + col + "] –≤—ã—Ä–æ—Å–ª–æ –Ω–∞ 0.1 –∫–≥.");
        });
    }

    public synchronized void processActions() {
        animals.forEach(animal -> {
            if (!animal.isAlive()) {
                System.out.println("‚ùå " + animal.getEmoji() + " –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ –º—ë—Ä—Ç–≤–æ–µ.");
                return;
            }

            animal.reduceHunger();
            System.out.println(animal.getEmoji() + " —É–º–µ–Ω—å—à–∏–ª —É—Ä–æ–≤–µ–Ω—å —Å—ã—Ç–æ—Å—Ç–∏. –¢–µ–∫—É—â–∞—è —Å—ã—Ç–æ—Å—Ç—å: " + animal.hungerLevel);

            if (animal.isHungry()) {
                System.out.println(animal.getEmoji() + " –≥–æ–ª–æ–¥–Ω–æ –∏ –∏—â–µ—Ç –µ–¥—É.");
                animal.eat();
            } else {
                System.out.println(animal.getEmoji() + " –Ω–µ –≥–æ–ª–æ–¥–Ω–æ –∏ –∏—â–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–∑–º–Ω–æ–∂–∏—Ç—å—Å—è.");
                animal.move();
                animal.reproduce();
            }
        });

        // –£–¥–∞–ª—è–µ–º –º—ë—Ä—Ç–≤—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏ —Ä–∞—Å—Ç–µ–Ω–∏–π –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏–π
        removeDeadAnimals();
        removeDeadPlants();
    }
}
